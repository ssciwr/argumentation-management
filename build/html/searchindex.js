Search.setIndex({"docnames": ["index", "license_link", "modules", "nlpannotator", "readme_link"], "filenames": ["index.rst", "license_link.md", "modules.rst", "nlpannotator.rst", "readme_link.md"], "titles": ["Welcome to NLPAnnotator\u2019s documentation!", "License", "nlpannotator package modules", "base module", "Automated annotation of natural languages using selected toolchains"], "terms": {"thi": [0, 1, 3, 4], "data": [0, 3], "pipelin": [0, 3, 4], "provid": [0, 1, 3, 4], "annot": [0, 3], "text": [0, 2, 3, 4], "corpora": 0, "autom": 0, "natur": 0, "languag": [0, 3], "us": [0, 1, 3], "select": [0, 3], "toolchain": 0, "descript": 0, "instal": 0, "option": [0, 3], "tool": [0, 3], "processor": [0, 3], "input": [0, 3], "output": [0, 3], "demo": 0, "notebook": 0, "question": 0, "bug": 0, "report": 0, "contribut": 0, "releas": 0, "packag": [0, 4], "modul": [0, 4], "base": [0, 2], "main": [0, 2], "mflair": [0, 2], "msomajo": [0, 2], "mspaci": [0, 2], "mstanza": [0, 2], "mtreetagg": [0, 2], "pipe": [0, 2], "licens": 0, "index": [0, 3], "search": [0, 3], "page": 0, "mit": 1, "copyright": 1, "c": 1, "2021": 1, "ssc": 1, "permiss": 1, "i": [1, 3, 4], "herebi": 1, "grant": 1, "free": 1, "charg": 1, "ani": [1, 4], "person": 1, "obtain": 1, "copi": 1, "softwar": 1, "associ": 1, "document": [1, 4], "file": [1, 3, 4], "deal": 1, "without": [1, 3], "restrict": 1, "includ": [1, 3], "limit": 1, "right": 1, "modifi": 1, "merg": [1, 4], "publish": 1, "distribut": 1, "sublicens": 1, "sell": 1, "permit": 1, "whom": 1, "furnish": 1, "do": 1, "so": [1, 4], "subject": 1, "follow": [1, 4], "condit": 1, "The": [1, 3, 4], "abov": 1, "notic": 1, "shall": 1, "all": [1, 3, 4], "substanti": 1, "portion": 1, "THE": 1, "AS": 1, "warranti": 1, "OF": 1, "kind": 1, "express": 1, "OR": 1, "impli": 1, "BUT": 1, "NOT": 1, "TO": 1, "merchant": 1, "fit": 1, "FOR": 1, "A": [1, 4], "particular": 1, "purpos": 1, "AND": 1, "noninfring": 1, "IN": 1, "NO": 1, "event": 1, "author": 1, "holder": 1, "BE": 1, "liabl": 1, "claim": 1, "damag": 1, "other": [1, 4], "liabil": 1, "whether": 1, "an": [1, 3, 4], "action": 1, "contract": 1, "tort": 1, "otherwis": 1, "aris": 1, "from": [1, 3, 4], "out": [1, 3, 4], "connect": 1, "WITH": 1, "decodecorpu": [2, 3], "decode_to_fil": [2, 3], "encodecorpu": [2, 3], "add_tags_to_corpu": [2, 3], "encode_vrt": [2, 3], "fix_path": [2, 3], "queri": [2, 3], "setup": [2, 3], "outobject": [2, 3], "assemble_output_s": [2, 3], "assemble_output_token": [2, 3], "collect_result": [2, 3], "get_nam": [2, 3], "get_stag": [2, 3], "grab_ent": [2, 3], "grab_lemma": [2, 3], "grab_tag": [2, 3], "iter": [2, 3], "iterate_token": [2, 3], "open_outfil": [2, 3], "out_shortlist": [2, 3], "purg": [2, 3], "switch_styl": [2, 3], "token_list": [2, 3], "write_vrt": [2, 3], "write_xml": [2, 3], "preparerun": [2, 3], "get_cor": [2, 3], "get_text": [2, 3], "load_input_dict": [2, 3], "validate_input_dict": [2, 3], "call_flair": [2, 3], "call_somajo": [2, 3], "call_spaci": [2, 3], "call_stanza": [2, 3], "call_treetagg": [2, 3], "run": [2, 3, 4], "myflair": [2, 3], "apply_to": [2, 3], "outflair": [2, 3], "sentence_token_list": [2, 3], "mysomajo": [2, 3], "outsomajo": [2, 3], "sentenc": [2, 3, 4], "myspaci": [2, 3], "outspaci": [2, 3], "mystanza": [2, 3], "outstanza": [2, 3], "word_list": [2, 3], "ner": [2, 3], "mytreetagg": [2, 3], "outtreetagg": [2, 3], "treetaggerdoc": [2, 3], "lemma": [2, 3, 4], "po": [2, 3, 4], "setconfig": [2, 3], "set_processor": [2, 3], "set_tool": [2, 3], "class": 3, "mydict": 3, "decod": 3, "corpu": [3, 4], "cwb": [3, 4], "inherit": 3, "directori": 3, "home": [3, 4], "runner": 3, "work": 3, "argument": [3, 4], "manag": [3, 4], "doc": [3, 4], "verbos": 3, "true": 3, "specif": 3, "p": 3, "attribut": 3, "": 3, "function": 3, "given": [3, 4], "If": 3, "write": 3, "suppos": 3, "current": 3, "one": 3, "can": [3, 4], "paramat": 3, "locat": 3, "need": [3, 4], "rel": 3, "dict": 3, "object": 3, "encod": [3, 4], "vrt": [3, 4], "xml": [3, 4], "classmethod": 3, "ptag": 3, "list": [3, 4], "stag": 3, "add": 3, "tag": 3, "alreadi": 3, "exist": 3, "should": 3, "pretoken": 3, "said": 3, "assur": 3, "correct": 3, "align": 3, "arg": 3, "dictionari": [3, 4], "contain": [3, 4], "inform": 3, "These": [3, 4], "ar": [3, 4], "check": 3, "against": 3, "present": 3, "registri": 3, "onli": [3, 4], "structur": 3, "new": [3, 4], "static": 3, "path": 3, "str": 3, "conveni": [3, 4], "fix": 3, "neccessari": 3, "flush": 3, "return": 3, "bool": 3, "funtion": 3, "wheter": 3, "found": 3, "empti": 3, "creat": 3, "job": 3, "start": 3, "int": 3, "style": 3, "namespac": 3, "differ": [3, 4], "method": 3, "overwritten": 3, "ad": [3, 4], "depend": [3, 4], "requir": 3, "map": 3, "attribute_nam": 3, "make": [3, 4], "convers": 3, "clear": 3, "duplic": 3, "code": [3, 4], "templat": 3, "assembl": 3, "level": 3, "token": [3, 4], "tid": 3, "word": 3, "collect": 3, "request": [3, 4], "after": [3, 4], "appli": 3, "paramet": 3, "string": 3, "line": 3, "load": [3, 4], "name": [3, 4], "get": 3, "entiti": 3, "properti": 3, "attrnam": 3, "sent": 3, "through": [3, 4], "outnam": 3, "initi": [3, 4], "remov": 3, "befor": 3, "compar": 3, "out_str": 3, "replac": 3, "problemat": 3, "pattern": 3, "switch": 3, "myobj": 3, "convert": 3, "none": 3, "corpus_nam": [3, 4], "semi": 3, "tab": 3, "space": 3, "gener": [3, 4], "pre": [3, 4], "process": [3, 4], "find": 3, "how": 3, "mani": 3, "cpu": 3, "core": 3, "avail": [3, 4], "read": 3, "specifi": [3, 4], "json": 3, "extens": 3, "dict_in": 3, "islist": 3, "fals": 3, "path_json": 3, "myinput": 3, "path_txt": 3, "txt": [3, 4], "subdict": 3, "flair": [3, 4], "doe": 3, "treetagg": [3, 4], "raw": [3, 4], "below": [3, 4], "textual": 3, "0": 3, "combin": [3, 4], "simultan": 3, "somajo": [3, 4], "tokenize_text": 3, "mai": [3, 4], "paragraph": 3, "model": [3, 4], "de_cmc": 3, "en_ptb": 3, "split_sent": 3, "perform": 3, "split": 3, "addit": [3, 4], "assembli": 3, "which": [3, 4], "well": 3, "number": 3, "previou": 3, "easili": 3, "keep": 3, "track": 3, "type": [3, 4], "spaci": [3, 4], "assemlb": 3, "stanza": [3, 4], "sever": 3, "extract": 3, "outdict": 3, "set": [3, 4], "config": 3, "each": [3, 4], "here": [3, 4], "we": 3, "1": 3, "2": 3, "updat": 3, "sub": 3, "project": 4, "just": 4, "had": 4, "its": 4, "first": 4, "version": 4, "still": 4, "under": 4, "develop": 4, "nlpannot": 4, "serv": 4, "modular": 4, "nlp": 4, "part": 4, "speech": 4, "desir": 4, "fashion": 4, "target": 4, "either": 4, "maximum": 4, "effici": 4, "accuraci": 4, "pypi": 4, "pip": 4, "separ": 4, "you": 4, "script": 4, "have": 4, "been": 4, "implement": 4, "two": 4, "fast": 4, "accur": 4, "manual": 4, "where": 4, "support": 4, "keyword": 4, "default": 4, "possibl": 4, "example_en": 4, "test": 4, "en": 4, "see": 4, "processing_opt": 4, "good": 4, "english": 4, "processing_typ": 4, "four": 4, "output_format": 4, "format": 4, "ye": 4, "directli": 4, "summari": 4, "some": 4, "For": 4, "exampl": 4, "availab": 4, "far": 4, "respect": 4, "thei": 4, "demand": 4, "de": 4, "fr": 4, "ja": 4, "pt": 4, "ru": 4, "e": 4, "both": 4, "bg": 4, "nl": 4, "et": 4, "fi": 4, "gl": 4, "kr": 4, "la": 4, "mn": 4, "pl": 4, "sk": 4, "sw": 4, "expect": 4, "togeth": 4, "also": 4, "print": 4, "when": 4, "store": 4, "look": 4, "up": 4, "later": 4, "time": 4, "jupyt": 4, "interfac": 4, "take": 4, "demonotebook": 4, "binder": 4, "pleas": 4, "ask": 4, "submit": 4, "our": 4, "issu": 4, "tracker": 4, "wellcom": 4, "fork": 4, "repo": 4, "open": 4, "pull": 4, "chang": 4, "review": 4, "team": 4, "sure": 4, "your": 4, "clean": 4, "properli": 4, "design": 4, "principl": 4, "sourc": 4, "iulusoi": 4, "build": 4, "html": 4, "must": 4, "least": 4, "80": 4, "coverag": 4, "note": 4}, "objects": {"": [[3, 0, 0, "-", "base"], [3, 0, 0, "-", "main"], [3, 0, 0, "-", "mflair"], [3, 0, 0, "-", "msomajo"], [3, 0, 0, "-", "mspacy"], [3, 0, 0, "-", "mstanza"], [3, 0, 0, "-", "mtreetagger"], [3, 0, 0, "-", "pipe"]], "base": [[3, 1, 1, "", "DecodeCorpus"], [3, 1, 1, "", "EncodeCorpus"], [3, 1, 1, "", "OutObject"], [3, 1, 1, "", "PrepareRun"]], "base.DecodeCorpus": [[3, 2, 1, "", "decode_to_file"]], "base.EncodeCorpus": [[3, 2, 1, "", "add_tags_to_corpus"], [3, 2, 1, "", "encode_vrt"], [3, 2, 1, "", "fix_path"], [3, 2, 1, "", "query"], [3, 2, 1, "", "setup"]], "base.OutObject": [[3, 2, 1, "", "assemble_output_sent"], [3, 2, 1, "", "assemble_output_tokens"], [3, 2, 1, "", "collect_results"], [3, 2, 1, "", "get_names"], [3, 2, 1, "", "get_stags"], [3, 2, 1, "", "grab_ent"], [3, 2, 1, "", "grab_lemma"], [3, 2, 1, "", "grab_tag"], [3, 2, 1, "", "iterate"], [3, 2, 1, "", "iterate_tokens"], [3, 2, 1, "", "open_outfile"], [3, 2, 1, "", "out_shortlist"], [3, 2, 1, "", "purge"], [3, 2, 1, "", "switch_style"], [3, 2, 1, "", "token_list"], [3, 2, 1, "", "write_vrt"], [3, 2, 1, "", "write_xml"]], "base.PrepareRun": [[3, 2, 1, "", "get_cores"], [3, 2, 1, "", "get_text"], [3, 2, 1, "", "load_input_dict"], [3, 2, 1, "", "validate_input_dict"]], "main": [[3, 3, 1, "", "call_flair"], [3, 3, 1, "", "call_somajo"], [3, 3, 1, "", "call_spacy"], [3, 3, 1, "", "call_stanza"], [3, 3, 1, "", "call_treetagger"], [3, 3, 1, "", "run"]], "mflair": [[3, 1, 1, "", "MyFlair"], [3, 1, 1, "", "OutFlair"]], "mflair.MyFlair": [[3, 2, 1, "", "apply_to"]], "mflair.OutFlair": [[3, 2, 1, "", "assemble_output_tokens"], [3, 2, 1, "", "grab_tag"], [3, 2, 1, "", "sentence_token_list"]], "msomajo": [[3, 1, 1, "", "MySomajo"], [3, 1, 1, "", "OutSomajo"]], "msomajo.MySomajo": [[3, 2, 1, "", "apply_to"]], "msomajo.OutSomajo": [[3, 2, 1, "", "assemble_output_sent"], [3, 4, 1, "", "sentences"]], "mspacy": [[3, 1, 1, "", "MySpacy"], [3, 1, 1, "", "OutSpacy"]], "mspacy.MySpacy": [[3, 2, 1, "", "apply_to"]], "mspacy.OutSpacy": [[3, 2, 1, "", "assemble_output_tokens"], [3, 4, 1, "", "sentences"]], "mstanza": [[3, 1, 1, "", "MyStanza"], [3, 1, 1, "", "OutStanza"], [3, 3, 1, "", "ner"]], "mstanza.MyStanza": [[3, 2, 1, "", "apply_to"]], "mstanza.OutStanza": [[3, 2, 1, "", "assemble_output_tokens"], [3, 2, 1, "", "iterate"], [3, 4, 1, "", "sentences"], [3, 2, 1, "", "token_list"], [3, 2, 1, "", "word_list"]], "mtreetagger": [[3, 1, 1, "", "MyTreetagger"], [3, 1, 1, "", "OutTreetagger"], [3, 1, 1, "", "TreetaggerDoc"]], "mtreetagger.MyTreetagger": [[3, 2, 1, "", "apply_to"]], "mtreetagger.OutTreetagger": [[3, 2, 1, "", "assemble_output_tokens"]], "mtreetagger.TreetaggerDoc": [[3, 4, 1, "", "lemma"], [3, 4, 1, "", "pos"], [3, 4, 1, "", "text"]], "pipe": [[3, 1, 1, "", "SetConfig"]], "pipe.SetConfig": [[3, 2, 1, "", "set_processors"], [3, 2, 1, "", "set_tool"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"]}, "titleterms": {"welcom": 0, "nlpannot": [0, 2], "": 0, "document": 0, "content": 0, "indic": 0, "tabl": 0, "licens": 1, "packag": 2, "modul": [2, 3], "base": 3, "main": 3, "mflair": 3, "msomajo": 3, "mspaci": 3, "mstanza": 3, "mtreetagg": 3, "pipe": 3, "autom": 4, "annot": 4, "natur": 4, "languag": 4, "us": 4, "select": 4, "toolchain": 4, "descript": 4, "instal": 4, "option": 4, "tool": 4, "processor": 4, "input": 4, "output": 4, "demo": 4, "notebook": 4, "question": 4, "bug": 4, "report": 4, "contribut": 4, "releas": 4}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Welcome to NLPAnnotator\u2019s documentation!": [[0, "welcome-to-nlpannotator-s-documentation"]], "Contents:": [[0, null]], "Indices and tables": [[0, "indices-and-tables"]], "License": [[1, "license"]], "nlpannotator package modules": [[2, "nlpannotator-package-modules"]], "base module": [[3, "module-base"]], "main module": [[3, "module-main"]], "mflair module": [[3, "module-mflair"]], "msomajo module": [[3, "module-msomajo"]], "mspacy module": [[3, "module-mspacy"]], "mstanza module": [[3, "module-mstanza"]], "mtreetagger module": [[3, "module-mtreetagger"]], "pipe module": [[3, "module-pipe"]], "Automated annotation of natural languages using selected toolchains": [[4, "automated-annotation-of-natural-languages-using-selected-toolchains"]], "Description": [[4, "description"]], "Installation": [[4, "installation"]], "Options": [[4, "options"]], "Tools": [[4, "tools"]], "Processors": [[4, "processors"]], "Languages": [[4, "languages"]], "Input/Output": [[4, "input-output"]], "Demo notebook": [[4, "demo-notebook"]], "Questions and bug reports": [[4, "questions-and-bug-reports"]], "Contribute": [[4, "contribute"]], "Releases": [[4, "releases"]]}, "indexentries": {"decodecorpus (class in base)": [[3, "base.DecodeCorpus"]], "encodecorpus (class in base)": [[3, "base.EncodeCorpus"]], "myflair (class in mflair)": [[3, "mflair.MyFlair"]], "mysomajo (class in msomajo)": [[3, "msomajo.MySomajo"]], "myspacy (class in mspacy)": [[3, "mspacy.MySpacy"]], "mystanza (class in mstanza)": [[3, "mstanza.MyStanza"]], "mytreetagger (class in mtreetagger)": [[3, "mtreetagger.MyTreetagger"]], "outflair (class in mflair)": [[3, "mflair.OutFlair"]], "outobject (class in base)": [[3, "base.OutObject"]], "outsomajo (class in msomajo)": [[3, "msomajo.OutSomajo"]], "outspacy (class in mspacy)": [[3, "mspacy.OutSpacy"]], "outstanza (class in mstanza)": [[3, "mstanza.OutStanza"]], "outtreetagger (class in mtreetagger)": [[3, "mtreetagger.OutTreetagger"]], "preparerun (class in base)": [[3, "base.PrepareRun"]], "setconfig (class in pipe)": [[3, "pipe.SetConfig"]], "treetaggerdoc (class in mtreetagger)": [[3, "mtreetagger.TreetaggerDoc"]], "add_tags_to_corpus() (base.encodecorpus class method)": [[3, "base.EncodeCorpus.add_tags_to_corpus"]], "apply_to() (mflair.myflair method)": [[3, "mflair.MyFlair.apply_to"]], "apply_to() (msomajo.mysomajo method)": [[3, "msomajo.MySomajo.apply_to"]], "apply_to() (mspacy.myspacy method)": [[3, "mspacy.MySpacy.apply_to"]], "apply_to() (mstanza.mystanza method)": [[3, "mstanza.MyStanza.apply_to"]], "apply_to() (mtreetagger.mytreetagger method)": [[3, "mtreetagger.MyTreetagger.apply_to"]], "assemble_output_sent() (base.outobject method)": [[3, "base.OutObject.assemble_output_sent"]], "assemble_output_sent() (msomajo.outsomajo method)": [[3, "msomajo.OutSomajo.assemble_output_sent"]], "assemble_output_tokens() (base.outobject method)": [[3, "base.OutObject.assemble_output_tokens"]], "assemble_output_tokens() (mflair.outflair method)": [[3, "mflair.OutFlair.assemble_output_tokens"]], "assemble_output_tokens() (mspacy.outspacy method)": [[3, "mspacy.OutSpacy.assemble_output_tokens"]], "assemble_output_tokens() (mstanza.outstanza method)": [[3, "mstanza.OutStanza.assemble_output_tokens"]], "assemble_output_tokens() (mtreetagger.outtreetagger method)": [[3, "mtreetagger.OutTreetagger.assemble_output_tokens"]], "base": [[3, "module-base"]], "call_flair() (in module main)": [[3, "main.call_flair"]], "call_somajo() (in module main)": [[3, "main.call_somajo"]], "call_spacy() (in module main)": [[3, "main.call_spacy"]], "call_stanza() (in module main)": [[3, "main.call_stanza"]], "call_treetagger() (in module main)": [[3, "main.call_treetagger"]], "collect_results() (base.outobject method)": [[3, "base.OutObject.collect_results"]], "decode_to_file() (base.decodecorpus method)": [[3, "base.DecodeCorpus.decode_to_file"]], "encode_vrt() (base.encodecorpus method)": [[3, "base.EncodeCorpus.encode_vrt"]], "fix_path() (base.encodecorpus static method)": [[3, "base.EncodeCorpus.fix_path"]], "get_cores() (base.preparerun static method)": [[3, "base.PrepareRun.get_cores"]], "get_names() (base.outobject static method)": [[3, "base.OutObject.get_names"]], "get_stags() (base.outobject method)": [[3, "base.OutObject.get_stags"]], "get_text() (base.preparerun static method)": [[3, "base.PrepareRun.get_text"]], "grab_ent() (base.outobject method)": [[3, "base.OutObject.grab_ent"]], "grab_lemma() (base.outobject method)": [[3, "base.OutObject.grab_lemma"]], "grab_tag() (base.outobject method)": [[3, "base.OutObject.grab_tag"]], "grab_tag() (mflair.outflair method)": [[3, "mflair.OutFlair.grab_tag"]], "iterate() (base.outobject method)": [[3, "base.OutObject.iterate"]], "iterate() (mstanza.outstanza method)": [[3, "mstanza.OutStanza.iterate"]], "iterate_tokens() (base.outobject method)": [[3, "base.OutObject.iterate_tokens"]], "lemma (mtreetagger.treetaggerdoc property)": [[3, "mtreetagger.TreetaggerDoc.lemma"]], "load_input_dict() (base.preparerun static method)": [[3, "base.PrepareRun.load_input_dict"]], "main": [[3, "module-main"]], "mflair": [[3, "module-mflair"]], "module": [[3, "module-base"], [3, "module-main"], [3, "module-mflair"], [3, "module-msomajo"], [3, "module-mspacy"], [3, "module-mstanza"], [3, "module-mtreetagger"], [3, "module-pipe"]], "msomajo": [[3, "module-msomajo"]], "mspacy": [[3, "module-mspacy"]], "mstanza": [[3, "module-mstanza"]], "mtreetagger": [[3, "module-mtreetagger"]], "ner() (in module mstanza)": [[3, "mstanza.ner"]], "open_outfile() (base.outobject static method)": [[3, "base.OutObject.open_outfile"]], "out_shortlist() (base.outobject method)": [[3, "base.OutObject.out_shortlist"]], "pipe": [[3, "module-pipe"]], "pos (mtreetagger.treetaggerdoc property)": [[3, "mtreetagger.TreetaggerDoc.pos"]], "purge() (base.outobject static method)": [[3, "base.OutObject.purge"]], "query() (base.encodecorpus static method)": [[3, "base.EncodeCorpus.query"]], "run() (in module main)": [[3, "main.run"]], "sentence_token_list() (mflair.outflair method)": [[3, "mflair.OutFlair.sentence_token_list"]], "sentences (msomajo.outsomajo property)": [[3, "msomajo.OutSomajo.sentences"]], "sentences (mspacy.outspacy property)": [[3, "mspacy.OutSpacy.sentences"]], "sentences (mstanza.outstanza property)": [[3, "mstanza.OutStanza.sentences"]], "set_processors() (pipe.setconfig method)": [[3, "pipe.SetConfig.set_processors"]], "set_tool() (pipe.setconfig method)": [[3, "pipe.SetConfig.set_tool"]], "setup() (base.encodecorpus method)": [[3, "base.EncodeCorpus.setup"]], "switch_style() (base.outobject static method)": [[3, "base.OutObject.switch_style"]], "text (mtreetagger.treetaggerdoc property)": [[3, "mtreetagger.TreetaggerDoc.text"]], "token_list() (base.outobject method)": [[3, "base.OutObject.token_list"]], "token_list() (mstanza.outstanza method)": [[3, "mstanza.OutStanza.token_list"]], "validate_input_dict() (base.preparerun static method)": [[3, "base.PrepareRun.validate_input_dict"]], "word_list() (mstanza.outstanza method)": [[3, "mstanza.OutStanza.word_list"]], "write_vrt() (base.outobject static method)": [[3, "base.OutObject.write_vrt"]], "write_xml() (base.outobject static method)": [[3, "base.OutObject.write_xml"]]}})